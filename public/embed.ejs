<!DOCTYPE HTML>
<html>
    <title><%= username %> - AngelThump</title>

<head data-cast-api-enabled="true">
    <link rel="prefetch" href="/assets/patreon-overlay.png">
    <link rel="stylesheet" href="/css/errors.css">
	<link href="/css/embed.min.css" rel="stylesheet">
    <link href="/css/vjs7/video-js.min.css" rel="stylesheet">
    <link href="/css/vjs6/videojs-chromecast.min.css" rel="stylesheet">
    <link href="/css/vjs6/videojs.logobrand.min.css" rel="stylesheet">
    <link href="/css/vjs6/videojs-resolution-switcher.min.css" rel="stylesheet">
    <link rel="shortcut icon" href="/favicon.ico">
</head>

<body>
    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-98637299-1', 'auto');
      ga('send', 'pageview');
    </script>

    <video id=player class="video-js vjs-default-skin vjs-has-started" autoplay controls playsinline preload="auto"></video>
    <script src="//www.gstatic.com/cv/js/sender/v1/cast_sender.js"></script>
    <script type="text/javascript" src="/js/dep/can-autoplay.js"></script>
    <script type="text/javascript" src="/js/dep/vjs7/video.min.js"></script>
    <script type="text/javascript" src="/js/dep/vjs7/videojs-hlsjs-plugin.js"></script>
    <script type="text/javascript" src="/js/dep/vjs6/videojs-resolution-switcher.js"></script>
    <script type="text/javascript" src="/js/dep/vjs6/videojs.logobrand.js"></script>
    <script type="text/javascript" src="/js/dep/vjs6/videojs-persistvolume.js"></script>
    <script type="text/javascript" src="/js/dep/videojs-chromecast.js"></script>
    <script type="text/javascript" src="/socket.io/socket.io.js"></script>
    <script type="text/javascript" src="/js/dep/core.min.js"></script>
    <script type="text/javascript" src="/js/dep/feathers.min.js"></script>
    <script type="text/javascript" src="/js/dep/axios.min.js"></script>

    <script type="text/javascript">
        const host = 'https://viewer-api.angelthump.com', channel = "<%= username %>".toLowerCase(), poster = "<%= poster %>", servers = <%- JSON.stringify(servers) %>;
        var socket, requestTime = 1000, lastKnownServer, autoServer, transcode = <%= transcode %>, live = <%= live %>;
        const freeServerLabels = ['https://nyc.angelthump.com/','https://sfo.angelthump.com/','https://tor.angelthump.com/','https://fra.angelthump.com/',
        'https://ams.angelthump.com/','https://lon.angelthump.com/','https://blr.angelthump.com/','https://sgp.angelthump.com/'];
        const patreonLabels = ['US-EAST-PREMIUM','TORONTO-PREMIUM','US-WEST-PREMIUM','AMSTERDAM-PREMIUM','GERMANY-PREMIUM','LONDON-PREMIUM'];
        var disablePatreonServers = false;
        try {
            lastKnownServer = localStorage.getItem('lastKnownServer');
            autoServer = localStorage.getItem('auto-server');
        } catch (e) {
            disablePatreonServers = true;
            console.log(e);
            console.log("Please enable 3rd party cookies in your browser, so the site runs more smoothly :) !");
        }

        connect();

        const options = {
            errorDisplay: false,
            plugins: {
                videoJsResolutionSwitcher: {
                    dynamicLabel: true
                }
            },
            html5: {
                hlsjsConfig: {
                    debug: false
                }
            },
            chromecast:{
                appId:'50E3A992',
                metadata:{
                    title: channel + "'s stream"
                }
            }
        };

        var player = videojs('player', options);
        player.ready(function() {
            canAutoplay.video().then(function(obj) {
                if (obj.result === false) {
                    player.muted(true);
                }
            });
            if(!live) {
                this.poster(poster);
            }
            this.logobrand({
                image: "https://angelthump.com/assets/patreon.png",
                destination: "https://patreon.com/angelthump"
            });
            this.persistvolume({
                namespace: "volume"
            });
            if(((lastKnownServer == null) && !patreonLabels.includes(lastKnownServer)) || (autoServer == null || !freeServerLabels.includes(autoServer))) {
                //start stream with random edge in client's country, then update the src when getServer() is done
                getServer();
            }
            if(transcode) {
                updateTranscode();
            } else {
                startStream();
            }
        });
        
        player.on("playing", function() {
            if(!player.poster()) {
                this.poster(poster);
            }
            if(!socket.connected) {
                connect();
            }
        })

        player.on("resolutionchange", function() {
            player.loadingSpinner.show();
            const currentLabel = player.currentResolution().label;
            if (patreonLabels.includes(currentLabel)) {
                checkPatreon();
            } else {
                lastKnownServer = currentLabel;
                updateServer();
            }
        });
        

        player.on('error', function(e) {
            socket.disconnect();
            player.loadingSpinner.hide();
            if(player.error().code != 3) {
                player.error(null);
                retry();
            }
        });

        function retry() {
            setTimeout(function() {
                player.currentResolution(lastKnownServer);

                if (requestTime < 16000) {
                    requestTime = requestTime * 2;
                }
            }, requestTime);
        }

        socket.on('reload', function () {
            location.reload();
        });

        socket.on('redirect', function (url) {
            window.location = url;
        });

        socket.on('transcode', function () {
            console.log("socket transcode sent");
            updateTranscode();
        });

        function connect() {
            socket = io(host, {
                transports: ['websocket']
            });
            socket.on('connect', function() {
                socket.emit('channel', channel);
            });
        }

        function checkPatreon() {
            if(!disablePatreonServers) {
                var auth = io("https://angelthump.com", {
                    transports: ['websocket']
                });

                var app = feathers()
                .configure(feathers.socketio(auth))
                .configure(feathers.authentication({
                    storage: window.localStorage
                }));
                app.authenticate()
                .then(response => {
                    console.log('Authenticated!');
                    return app.passport.verifyJWT(response.accessToken);
                })
                .then(payload => {
                    return app.service('users').get(payload.userId);
                })
                .then(user => {
                    app.set('user', user);
                    var user = app.get('user');
                    if (user.isPatron) {
                        lastKnownServer = player.currentResolution().label;
                        updateServer();
                    } else {
                        player.currentResolution(lastKnownServer);
                        alert("You are not a patron!");
                    }
                    auth.disconnect();
                })
                .catch(function(error){
                    player.currentResolution(lastKnownServer);
                    window.location = 'https://angelthump.com/login';
                    console.error('Error authenticating!', error);
                });

                auth.io.engine.on('upgrade', function(transport) {
                    console.log('transport changed');
                    app.authenticate();
                });
            } else {
                alert('You must enable 3rd party cookies in your browser before using Patreon servers!');
                player.currentResolution(lastKnownServer);
                auth.disconnect();
            }
        }

        async function getTiming(url) {
            var startTime = (new Date()).getTime();
            var elaspedTime = Infinity;
            await axios({timeout: 2000, url: url + "random.png"})
            .then(function (response) {
                var endTime = (new Date()).getTime();
                elaspedTime = endTime - startTime;
            }).catch(function(error){
                console.log(error);
            });
            console.log(url + ": " + elaspedTime);
            return elaspedTime;
        }

        async function getServer() {
            var responseTime = servers.map(async server => await getTiming(server));
            var server;
            await Promise.all(responseTime).then((results) => {
                server = servers[results.indexOf(Math.min.apply(null , results))];
                console.log(server);
            });
            autoServer = server;
            if(autoServer != null) {
                const label = autoServer.substring(autoServer.indexOf('/') + 2, autoServer.indexOf('.'));
                updateServer();
                if(player.currentResolution().sources[0].label != 'Source (' + label + ')') {
                    if(transcode) {
                        updateTranscode();
                    } else {
                        startStream();
                    }
                }
            }
        }

        function startStream() {
            var sources = [];
            var label;
            if(autoServer == null) {
                randomServer = servers[Math.floor(Math.random() * servers.length)];
                label = randomServer.substring(randomServer.indexOf('/') + 2, randomServer.indexOf('.'));
                sources.push(
                {
                    type: "application/x-mpegURL",
                    src: randomServer + "hls/" + channel + "/index.m3u8",
                    label: 'Source (' + label + ')'
                });
            } else {
                label = autoServer.substring(autoServer.indexOf('/') + 2, autoServer.indexOf('.'));
                sources.push(
                {
                    type: "application/x-mpegURL",
                    src: autoServer + "hls/" + channel + "/index.m3u8",
                    label: 'Source (' + label + ')'
                });
            }
            sources.push({
                type: "application/x-mpegURL",
                src: "https://nyc-patreon.angelthump.com/hls/" + channel + "/index.m3u8",
                label: 'US-EAST-PREMIUM'
            },
            {
                type: "application/x-mpegURL",
                src: "https://tor-patreon.angelthump.com/hls/" + channel + "/index.m3u8",
                label: 'TORONTO-PREMIUM'
            },
            {
                type: "application/x-mpegURL",
                src: "https://sfo-patreon.angelthump.com/hls/" + channel + "/index.m3u8",
                label: 'US-WEST-PREMIUM'
            },
            {
                type: "application/x-mpegURL",
                src: "https://lon-patreon.angelthump.com/hls/" + channel + "/index.m3u8",
                label: 'LONDON-PREMIUM'
            },
            {
                type: "application/x-mpegURL",
                src: "https://fra-patreon.angelthump.com/hls/" + channel + "/index.m3u8",
                label: 'GERMANY-PREMIUM'
            },
            {
                type: "application/x-mpegURL",
                src: "https://ams-patreon.angelthump.com/hls/" + channel + "/index.m3u8",
                label: 'AMSTERDAM-PREMIUM'
            });
            player.updateSrc(sources);
            var exists = false;
            for(const source of sources) {
                if(source.label == lastKnownServer) {
                    player.currentResolution(lastKnownServer);
                    exists = true;
                }
            }
            if(!exists) {
                player.currentResolution(sources[0].label);
            }
        }

        function updateTranscode() {
            console.log("transcode enabled");
            var sources = [];
            var label;
            if(autoServer == null) {
                randomServer = servers[Math.floor(Math.random() * servers.length)];
                label = randomServer.substring(randomServer.indexOf('/') + 2, randomServer.indexOf('.'));
                sources.push(
                {
                    type: "application/x-mpegURL",
                    src: randomServer + "hls/" + channel + "/index.m3u8",
                    label: 'Source (' + label + ')'
                });
            } else {
                label = autoServer.substring(autoServer.indexOf('/') + 2, autoServer.indexOf('.'));
                sources.push(
                {
                    type: "application/x-mpegURL",
                    src: autoServer + "hls/" + channel + "/index.m3u8",
                    label: 'Source (' + label + ')'
                });
            }
            sources.push(
            {
                type: "application/x-mpegURL",
                src: autoServer + "hls/" + channel + "_high/index.m3u8",
                label: '720p (' + label + ')'
            },
            {
                type: "application/x-mpegURL",
                src: autoServer + "hls/" + channel + "_medium/index.m3u8",
                label: '480p (' + label + ')'
            },
            {
                type: "application/x-mpegURL",
                src: autoServer + "hls/" + channel + "_low/index.m3u8",
                label: '360p (' + label + ')'
            },
            {
                type: "application/x-mpegURL",
                src: autoServer + "hls/" + channel + "_mobile/index.m3u8",
                label: '240p (' + label + ')'
            },
            {
                type: "application/x-mpegURL",
                src: "https://nyc-patreon.angelthump.com/hls/" + channel + "_src/index.m3u8",
                label: 'US-EAST-PREMIUM'
            },
            {
                type: "application/x-mpegURL",
                src: "https://tor-patreon.angelthump.com/hls/" + channel + "_src/index.m3u8",
                label: 'TORONTO-PREMIUM'
            },
            {
                type: "application/x-mpegURL",
                src: "https://sfo-patreon.angelthump.com/hls/" + channel + "_src/index.m3u8",
                label: 'US-WEST-PREMIUM'
            },
            {
                type: "application/x-mpegURL",
                src: "https://lon-patreon.angelthump.com/hls/" + channel + "_src/index.m3u8",
                label: 'LONDON-PREMIUM'
            },
            {
                type: "application/x-mpegURL",
                src: "https://fra-patreon.angelthump.com/hls/" + channel + "_src/index.m3u8",
                label: 'GERMANY-PREMIUM'
            },
            {
                type: "application/x-mpegURL",
                src: "https://ams-patreon.angelthump.com/hls/" + channel + "_src/index.m3u8",
                label: 'AMSTERDAM-PREMIUM'
            });
            player.updateSrc(sources);
            var exists = false;
            for(const source of sources) {
                if(source.label == lastKnownServer) {
                    player.currentResolution(lastKnownServer);
                    exists = true;
                }
            }
            if(!exists) {
                player.currentResolution(sources[0].label);
            }
        }

        function updateServer() {
            try {
                localStorage.setItem('auto-server', autoServer);
                localStorage.setItem('lastKnownServer', lastKnownServer);
            } catch(e) {
                console.log(e); 
                console.log("Please enable 3rd party cookies in your browser, so the site runs more smoothly :) !");
            }
        }

    </script>
</body>
</html>