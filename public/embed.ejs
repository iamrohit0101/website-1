<!DOCTYPE HTML>
<html>
    <title><%= username %> - AngelThump</title>

<head data-cast-api-enabled="true">
    <link rel="prefetch" href="/assets/patreon-overlay.png">
    <link rel="stylesheet" href="/css/errors.css">
	<link href="/css/embed.min.css" rel="stylesheet">
    <link href="/css/vjs7/video-js.min.css" rel="stylesheet">
    <link href="/css/vjs6/videojs-chromecast.min.css" rel="stylesheet">
    <link href="/css/vjs6/videojs.logobrand.min.css" rel="stylesheet">
    <link href="/css/vjs6/videojs-resolution-switcher.min.css" rel="stylesheet">
    <link href="/css/vjs6/videojs-overlay.min.css" rel="stylesheet">
    <link rel="shortcut icon" href="/favicon.ico">
</head>

<body>
    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-98637299-1', 'auto');
      ga('send', 'pageview');
    </script>

    <video id=player class="video-js vjs-default-skin vjs-big-play-centered vjs-has-started" autoplay controls playsinline preload="auto"></video>
    <script src="//www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1"></script>
    <script type="text/javascript" src="/js/dep/vjs7/video.min.js"></script>
    <script type="text/javascript" src="/js/dep/vjs6/videojs-resolution-switcher.js"></script>
    <script type="text/javascript" src="/js/dep/vjs7/videojs-hlsjs-plugin.js"></script>
    <script type="text/javascript" src="/js/dep/vjs6/videojs.logobrand.js"></script>
    <script type="text/javascript" src="/js/dep/vjs6/videojs-persistvolume.js"></script>
    <script type="text/javascript" src="/js/dep/vjs6/videojs-chromecast.min.js"></script>
    <script type="text/javascript" src="/socket.io/socket.io.js"></script>
    <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/core-js/2.5.7/core.min.js"></script>
    <script type="text/javascript" src="//unpkg.com/@feathersjs/client@^3.0.0/dist/feathers.min.js"></script>
    <script type="text/javascript" src="/js/dep/vjs6/videojs-overlay.min.js"></script>
    <script type="text/javascript" src="//unpkg.com/axios/dist/axios.min.js"></script>

    <script type="text/javascript">
        const host = 'https://angelthump.com', channel = "<%= username %>".toLowerCase(), poster = "<%= poster %>", servers = <%- JSON.stringify(servers) %>;
        var socket, requestTime = 1000, lastKnownServer, autoServer;
        const freeServerLabels = ['https://nyc1.angelthump.com/','https://sfo1.angelthump.com/','https://tor1.angelthump.com/','https://fra1.angelthump.com/',
        'https://ams1.angelthump.com/','https://lon1.angelthump.com/','https://blr1.angelthump.com/','https://sgp1.angelthump.com/'];
        const patreonLabels = ['US-EAST-PREMIUM','TORONTO-PREMIUM','US-WEST-PREMIUM','AMSDERTAM-PREMIUM','GERMANY-PREMIUM','LONDON-PREMIUM'];

        try {
            lastKnownServer = localStorage.getItem('server');
            autoServer = localStorage.getItem('autoServer');
        } catch (e) {
            console.log(e);
            console.log("Please enable 3rd party cookies in your browser, so the site runs more smoothly :) !");
        }
        
        connect();

        const options = {
            errorDisplay: false,
            plugins: {
                videoJsResolutionSwitcher: {
                    dynamicLabel: true
                }
            },
            html5: {
                hlsjsConfig: {
                    debug: false
                }
            },
            chromecast:{
                appId:'50E3A992',
                metadata:{
                    title: channel + "'s stream"
                }
            }
        };

        const player = videojs('player', options);
        player.ready(function() {
            this.loadingSpinner.hide();
            this.poster(poster);
            this.logobrand({
                image: "https://angelthump.com/assets/patreon.png",
                destination: "https://patreon.com/angelthump"
            });
            this.persistvolume({
                namespace: "volume"
            });
            this.overlay({
                overlays: [{
                    start: 1,
                    end: 5,
                    content: "<style>img{max-width:100%;}</style><a href='https://www.patreon.com/angelthump' target='_blank'><img src='/assets/patreon-overlay.png'></a>",
                    align: "bottom",
                    showBackground: false
                }]
            });
            if(((lastKnownServer == null || lastKnownServer == 'auto') && !patreonLabels.includes(lastKnownServer)) || (autoServer == null || !freeServerLabels.includes(autoServer))) {
                getServer();
            } else {
                startStream();
            }
        });
        
        //var bufferedEventsCount = 0, serversUsedAlready=[autoServer];
        player.on("playing", function() {
            if(!socket.connected) {
                connect();
            }
            /*
            player.one('waiting', function() {
                if(player.readyState() == 2) {
                    bufferedEventsCount++;
                    var server;
                    if(bufferedEventsCount >= 5) {
                        bufferedEventsCount = 0;
                        for(server of servers) {
                            if(!serversUsedAlready.includes(server)) {
                                serversUsedAlready.push(server);
                                console.log('trying new server: ' + server);
                                newServer = server;
                                break;
                            }
                        }
                        if(newServer != null) {
                            sources = [{
                                type: "application/x-mpegURL",
                                src: newServer + "hls/" + channel + "/index.m3u8",
                                label: 'auto'
                            },{
                                type: "application/x-mpegURL",
                                src: "https://nyc-patreon.angelthump.com/hls/" + channel + "/index.m3u8",
                                label: 'US-EAST-PATREON'
                            },{
                                type: "application/x-mpegURL",
                                src: "https://sfo-patreon.angelthump.com/hls/" + channel + "/index.m3u8",
                                label: 'US-WEST-PATREON'
                            },{
                                type: "application/x-mpegURL",
                                src: "https://ams-patreon.angelthump.com/hls/" + channel + "/index.m3u8",
                                label: 'EU-PATREON'
                            }];
                            player.updateSrc(sources);
                            player.currentResolution('auto');
                        } else {
                            console.log('no new servers to try... still buffering');
                            console.log(servers);
                        }
                    }
                }
            })*/
        })

        player.on("resolutionchange", function() {
            player.loadingSpinner.show();
            if (patreonLabels.includes(player.currentResolution().label)) {
                checkPatreon();
            } else {
                lastKnownServer = player.currentResolution().label;
                localStorage.setItem('server', lastKnownServer);
            }
        });

        function Emitter() {
            var handlers = {};

            function getEventHandlers(name) {
                return handlers.hasOwnProperty(name) ? handlers[name] : (handlers[name] = {on: [], one: []});
            }

            function on(name, handler) {
                getEventHandlers(name).on.push(handler);
            }

            function one(name, handler) {
                getEventHandlers(name).one.push(handler);
            }

            function remove(arr, v) {
                var i = arr.indexOf(v);
                if (i !== -1) {
                    arr.splice(i, 1);
                }
            }

            function off(name, handler) {
                var eventHandlers = handlers[name];
                if (eventHandlers !== undefined) {
                    remove(eventHandlers.on, handler);
                    remove(eventHandlers.one, handler);
                    if (eventHandlers.on.length === 0 && eventHandlers.one.length === 0) {
                        delete handlers[name];
                    }
                }
            }

            function emit(name) {
                var eventHandlers = handlers[name];
                if (eventHandlers !== undefined) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    var onHandlers = eventHandlers.on;
                    var oneHandlers = eventHandlers.one;

                    eventHandlers.one = [];

                    for (var i = 0, l = onHandlers.length; i < l; i ++) {
                        onHandlers[i].apply(this, args);
                    }
                    for (var i = 0, l = oneHandlers.length; i < l; i ++) {
                        oneHandlers[i].apply(this, args);
                    }

                }
            }

            return {
                on: on,
                off: off,
                one: one,
                emit: emit,
            };
        }

        function Monitor(player) {
            var REPORT_INTERVAL = 5000;
            var REPORT_SERVER = 'https://stats.angelthump.com';
            var RESOURCE_TIMING_FLUSH_INTERVAL = 100;

            var active = {};
            var events = [];
            var live = false;

            function publishReport() {
                Object.keys(active).forEach(function(k) {
                    events.push(Object.assign({active: true}, active[k]));
                });

                var report = {};
                events.forEach(function(event) {
                    for (var k in event) {
                        if (event.hasOwnProperty(k) && event[k] === 0 || event[k] == null) {
                            delete event[k];
                        }
                    }

                    event.sent = Date.now();

                    (report[event.type] || (report[event.type] = [])).push(event);
                });

                var req = new XMLHttpRequest();
                req.open('POST', REPORT_SERVER + '/api/v1/report', true);
                req.setRequestHeader('Content-type', 'application/javascript');
                req.send(JSON.stringify(report));
            }

            setInterval(function() {
                if (live) {
                    publishReport();
                }
                events = [];
            }, REPORT_INTERVAL);

            var clientId = Date.now();
            var eventId = 0;
            var hostPattern = /https:\/\/([^\.]+)/i;
            function initEvent() {
                var match = player.currentSrc().match(hostPattern);

                var dimensions = player.currentDimensions();
                var sourceRatio = player.videoHeight() / player.videoWidth();
                var playerRatio = dimensions.height / dimensions.width;
                var scale = playerRatio > sourceRatio
                    ? dimensions.width / player.videoWidth()
                    : dimensions.height / player.videoHeight();

                return {
                    clientId: clientId,
                    eventId: eventId ++,
                    source: match ? match[1] : '',
                    videoHeight: player.videoHeight(),
                    videoWidth: player.videoWidth(),
                    scale: Math.round(scale * 100) / 100,
                    channel: channel,
                };
            }

            var emitter = Emitter();

            function eventProxy(src) {
                return function(name) {
                    src.on(name, function() {
                        var args = [name];
                        Array.prototype.push.apply(args, arguments);
                        emitter.emit.apply(this, args);
                    });
                }
            }

            [
                'waiting',
                'loadstart',
                'loadedmetadata',
                'loadeddata',
                'canplay',
                'canplaythrough',
                'playing',
                'play',
                'stalled',
                'error'
            ].forEach(eventProxy(player));

            videojs.Html5Hlsjs.addHook('beforeinitialize', function(player, hlsjs) {
                [
                    'hlsError',
                    'hlsMediaAttaching',
                ].forEach(eventProxy(hlsjs));
            });

            emitter.on('hlsError', function(type, e) {
                if (e.response !== undefined && e.response.code === 404) {
                    live = false;
                    emitter.emit('streamOffline');
                }
            });

            emitter.on('hlsMediaAttaching', function() {
                live = true;
                events = [];
                emitter.emit('streamOnline');
            });

            function beginBufferingEvent(type, done) {
                var event = Object.assign(initEvent(), {
                    type: type,
                    start: Date.now(),
                    cancelled: false
                });

                [
                    'waiting',
                    'loadstart',
                    'loadedmetadata',
                    'loadeddata',
                    'canplay',
                    'canplaythrough',
                    'playing'
                ].forEach(function(name) {
                    emitter.one(name, function() {
                        event[name] = Date.now() - event.start;
                    });
                });

                function cancel() {
                    event.cancelled = true;
                    done(event);
                }
                emitter.one('pause', cancel);
                emitter.one('streamOnline', cancel);

                emitter.one('canplaythrough', function() {
                    if (!event.cancelled) {
                        emitter.off('pause', cancel);
                        done(event);
                    }
                });

                return event;
            }

            function handleBufferingEvent(type) {
                if (active[type] === undefined) {
                    active[type] = beginBufferingEvent(type, function(event) {
                        if (!event.cancelled) {
                            events.push(active[type])
                        }
                        if (active[type] === event) {
                            delete active[type];
                        }
                    });
                }
            }

            emitter.on('play', function() { handleBufferingEvent('play'); });
            emitter.on('stalled', function() { handleBufferingEvent('stalled'); });
            emitter.on('waiting', function() { handleBufferingEvent('waiting'); });

            emitter.on('error', function() {
                events.push({
                    type: 'error',
                    networkState: player.networkState(),
                    error: player.error()
                });
            });

            var tsPattern = /^https:\/\/([^\.]+).*\/([0-9]+)\.ts$/i
            performance.clearResourceTimings();
            setInterval(function() {
                var timings = performance.getEntriesByType('resource');
                performance.clearResourceTimings();

                timings.forEach(function(t) {
                    var match = t.name.match(tsPattern);
                    if (match) {
                        events.push(Object.assign(initEvent(), {
                            type: 'resource',
                            host: match[1],
                            chunk: parseFloat(match[2]),
                            redirect: Math.round(t.fetchStart - t.startTime),
                            dns: Math.round(t.domainLookupEnd - t.domainLookupStart),
                            connect: Math.round(t.connectEnd - t.connectStart),
                            send: Math.round(t.responseStart - t.requestStart),
                            receive: Math.round(t.responseEnd - t.responseStart),
                            total: Math.round(t.duration),
                            size: t.transferSize
                        }));
                    }
                });
            }, RESOURCE_TIMING_FLUSH_INTERVAL);
        }

        if (videojs.Html5Hlsjs) {
            new Monitor(player);
        }

        player.on('error', function(e) {
            player.loadingSpinner.hide();
            player.error(null);
            retry();
        });

        function retry() {
            setTimeout(function() {
                player.currentResolution(lastKnownServer);

                if (requestTime < 16000) {
                    requestTime = requestTime * 2;
                }
            }, requestTime);
        }

        socket.on('reload', function () {
            location.reload();
        });

        socket.on('redirect', function (url) {
            window.location = url;
        });

        function checkPatreon() {
            var app = feathers()
                .configure(feathers.socketio(socket))
                .configure(feathers.authentication({
                    storage: window.localStorage
                }));
            app.authenticate()
            .then(response => {
                console.log('Authenticated!');
                return app.passport.verifyJWT(response.accessToken);
            })
            .then(payload => {
                return app.service('users').get(payload.userId);
            })
            .then(user => {
                app.set('user', user);
                var user = app.get('user');
                if (user.ifPatreon) {
                    localStorage.setItem('server', player.currentResolution().label);
                    lastKnownServer = player.currentResolution().label;
                } else {
                    player.currentResolution(lastKnownServer);
                    alert("You are not a patron!");
                }
            })
            .catch(function(error){
                player.currentResolution(lastKnownServer);
                window.location = 'https://angelthump.com/login';
                console.error('Error authenticating!', error);
            });

            socket.io.engine.on('upgrade', function(transport) {
                console.log('transport changed');
                app.authenticate();
            });
        }


        function connect() {
            socket = io(host, {
                transports: ['websocket']
            });
            socket.on('connect', function() {
                socket.emit('channel', channel);
            });
        }

        async function getTiming(url) {
            var startTime = (new Date()).getTime();
            var elaspedTime = null;
            await axios({timeout: 5000, url: url + "random.png"})
            .then(function (response) {
                var endTime = (new Date()).getTime();
                elaspedTime = endTime - startTime;
                console.log(url + ": " + elaspedTime);
            }).catch(function(error){
                console.log(error);
            });
            return elaspedTime;
        }

        async function getServer() {
            const responseTime = servers.map(async server => await getTiming(server));
            var server;
            await Promise.all(responseTime).then((results) => {
                server = servers[results.indexOf(Math.min.apply(null , results))];
                console.log(server);
            });
            autoServer = server;
            const label = autoServer.substring(autoServer.indexOf('/') + 2, autoServer.indexOf('.'));
            lastKnownServer = 'auto (' + label + ')';
            try {
                localStorage.setItem('autoServer', autoServer);
                localStorage.setItem('server', lastKnownServer);
            } catch(e) {
                console.log(e); 
                console.log("Please enable 3rd party cookies in your browser, so the site runs more smoothly :) !");
            }
            if(autoServer == null) { //find a fix if still undefined. possibly with servers?
                autoServer = 'https://tor1.angelthump.com/';
                console.log('autoServer was null, forced to tor1');
            }
            startStream();
        }

        function startStream() {
            const label = autoServer.substring(autoServer.indexOf('/') + 2, autoServer.indexOf('.'));
            if(lastKnownServer.startsWith('auto')) {
                lastKnownServer = 'auto (' + label + ')';
            }
            var sources = [];
            sources.push(
                {
                    type: "application/x-mpegURL",
                    src: autoServer + "hls/" + channel + "/index.m3u8",
                    label: 'auto (' + label + ')'
                },{
                    type: "application/x-mpegURL",
                    src: "https://nyc-patreon.angelthump.com/hls/" + channel + "/index.m3u8",
                    label: 'US-EAST-PREMIUM'
                },{
                    type: "application/x-mpegURL",
                    src: "https://tor-patreon.angelthump.com/hls/" + channel + "/index.m3u8",
                    label: 'TORONTO-PREMIUM'
                },{
                    type: "application/x-mpegURL",
                    src: "https://sfo-patreon.angelthump.com/hls/" + channel + "/index.m3u8",
                    label: 'US-WEST-PREMIUM'
                },{
                    type: "application/x-mpegURL",
                    src: "https://lon-patreon.angelthump.com/hls/" + channel + "/index.m3u8",
                    label: 'LONDON-PREMIUM'
                },{
                    type: "application/x-mpegURL",
                    src: "https://fra-patreon.angelthump.com/hls/" + channel + "/index.m3u8",
                    label: 'GERMANY-PREMIUM'
                },{
                    type: "application/x-mpegURL",
                    src: "https://ams-patreon.angelthump.com/hls/" + channel + "/index.m3u8",
                    label: 'AMSTERDAM-PREMIUM'
                }
            );
            /*
            servers.forEach(function(server) {
                const label = server.substring(server.indexOf('/') + 2, server.indexOf('.') - 1);
                sources.push({
                    type: "application/x-mpegURL",
                    src: server + "hls/" + channel + "/index.m3u8",
                    label: label + " (free)"
                });
            })*/
            player.updateSrc(sources);
            player.currentResolution(lastKnownServer);
        }

    </script>
</body>
</html>
